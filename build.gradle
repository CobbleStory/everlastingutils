plugins {
	id 'fabric-loom' version '1.9-SNAPSHOT'
	id 'maven-publish'
	id "org.jetbrains.kotlin.jvm" version "2.1.0"
	id 'com.github.johnrengelman.shadow' version '8.1.1'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

// Define a custom configuration for Kyori dependencies.
configurations {
	kyori
	// This is to prevent gradle warning about conflicting dependencies on the classpath
	implementation.extendsFrom kyori
	compileOnly.extendsFrom kyori
}

repositories {
	mavenCentral()

	maven {
		url "https://cursemaven.com"
	}
	maven {
		url "https://thedarkcolour.github.io/KotlinForForge/"
	}
	maven {
		url "https://maven.fabricmc.net/"
	}
	maven {
		url "https://maven.architectury.dev/"
	}
	maven {
		url "https://jitpack.io"
	}
	maven {
		url "https://repo.maven.apache.org/maven2/"
	}
	maven {
		url "https://repo.spongepowered.org/maven/"
	}
	maven {
		url "https://files.minecraftforge.net/maven/"
	}
	maven {
		url "https://papermc.io/repo/repository/maven-public/"
	}
	maven {
		url "https://repo.extendedclip.com/content/repositories/placeholderapi/"
	}
	maven {
		url "https://maven.impactdev.net/repository/development"
	}
	maven {
		url "https://repo.essentialsx.net/releases/"
	}
	maven {
		url "https://gitlab.com/cable-mc/cobblemon"
	}
	// Local Maven repository
	mavenLocal()

	maven {
		url "https://maven.impactdev.net/repository/development/"
	}
	maven { url 'https://jitpack.io' }
	maven { url 'https://maven.nucleoid.xyz' }
	maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
}

loom {
	splitEnvironmentSourceSets()

	mods {
		"everlastingutils" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}
}

fabricApi {
	configureDataGeneration {
		client = true
	}
}

dependencies {
	// Minecraft and mappings
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API and Fabric Kotlin support.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	modImplementation "net.fabricmc:fabric-language-kotlin:${project.fabric_kotlin_version}"

	modImplementation('me.lucko:fabric-permissions-api:0.2-SNAPSHOT')
	modImplementation("curse.maven:cyber-permissions-407695:4640544")

	// Add Kyori dependencies to the custom 'kyori' configuration.
	// Using the same version for all kyori dependencies to ensure compatibility
	kyori 'net.kyori:adventure-api:4.17.0'
	kyori 'net.kyori:adventure-text-minimessage:4.17.0'
	kyori 'net.kyori:adventure-text-serializer-gson:4.17.0'
	kyori 'net.kyori:adventure-text-serializer-legacy:4.17.0'  // Updated to 4.17.0
	kyori 'net.kyori:examination-api:1.3.0'  // Updated to latest compatible version
	kyori 'net.kyori:examination-string:1.3.0'  // Added for completeness
	// Added these to ensure all necessary kyori components are included
	kyori 'net.kyori:adventure-key:4.17.0'
	kyori 'net.kyori:adventure-text-serializer-plain:4.17.0'

	// Make sure we exclude Kyori from the main classpath to avoid duplicate class issues
	modImplementation("net.kyori:adventure-platform-fabric:5.14.1") {
		exclude group: 'net.kyori'
	}
}

// Configure the shadow jar task
shadowJar {
	// Only include the Kyori dependencies from the custom configuration.
	configurations = [project.configurations.kyori]

	// Relocate the entire Kyori Adventure and Examination packages.
	relocate 'net.kyori', 'com.everlastingutils.shaded.net.kyori'

	// Exclude certain files if necessary
	exclude 'META-INF/maven/**'
	exclude 'META-INF/proguard/**'

	// Ensure the classifier is empty so it uses the main jar name
	archiveClassifier.set('')

	// Merge service files
	mergeServiceFiles()
}

// Make sure remapJar uses the output of shadowJar
tasks.remapJar {
	dependsOn(tasks.shadowJar)
	inputFile.set(tasks.shadowJar.archiveFile)
}

// Ensure the shadow jar task runs before the remap jar task
tasks.shadowJar.finalizedBy(tasks.remapJar)

// Make build depend on remapJar
tasks.build.dependsOn(tasks.remapJar)

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
	kotlinOptions {
		jvmTarget = "21"
	}
}

java {
	// Generate a sources jar.
	withSourcesJar()
	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}" }
	}
}

publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}
	repositories {
		// Add publishing repositories here.
	}
}